import { useQuery, useMutation } from "@tanstack/react-query";
import { useState } from "react";
import { Plus, Calendar, List, Eye, Edit, Trash2, Clock, Zap } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { formatDistanceToNow, format, addDays, startOfWeek, endOfWeek, eachDayOfInterval, isSameDay } from "date-fns";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { MaintenanceSchedule, InsertMaintenanceSchedule } from "@shared/schema";

interface CalendarViewProps {
  schedules: MaintenanceSchedule[];
  onScheduleClick: (schedule: MaintenanceSchedule) => void;
}

function CalendarView({ schedules, onScheduleClick }: CalendarViewProps) {
  const [currentWeek, setCurrentWeek] = useState(new Date());
  
  const weekStart = startOfWeek(currentWeek, { weekStartsOn: 1 });
  const weekEnd = endOfWeek(currentWeek, { weekStartsOn: 1 });
  const weekDays = eachDayOfInterval({ start: weekStart, end: weekEnd });
  
  const getSchedulesForDay = (day: Date) => {
    return schedules.filter(schedule => 
      isSameDay(new Date(schedule.scheduledDate), day)
    );
  };
  
  const getPriorityColor = (priority: number) => {
    switch (priority) {
      case 1: return "bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300";
      case 2: return "bg-yellow-100 dark:bg-yellow-900/20 text-yellow-700 dark:text-yellow-300";
      case 3: return "bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300";
      default: return "bg-gray-100 dark:bg-gray-900/20 text-gray-700 dark:text-gray-300";
    }
  };
  
  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle className="text-xl font-semibold">Schedule Calendar</CardTitle>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline" 
            size="sm"
            onClick={() => setCurrentWeek(addDays(currentWeek, -7))}
            data-testid="button-prev-week"
          >
            Previous
          </Button>
          <Button
            variant="outline"
            size="sm" 
            onClick={() => setCurrentWeek(new Date())}
            data-testid="button-current-week"
          >
            Today
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setCurrentWeek(addDays(currentWeek, 7))}
            data-testid="button-next-week"
          >
            Next
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-7 gap-px bg-muted rounded-lg overflow-hidden">
          {/* Day headers */}
          {weekDays.map((day, index) => (
            <div key={index} className="bg-background p-3 text-center">
              <div className="font-medium text-sm">
                {format(day, 'EEE')}
              </div>
              <div className="text-2xl font-bold mt-1">
                {format(day, 'd')}
              </div>
            </div>
          ))}
          
          {/* Schedule items */}
          {weekDays.map((day, dayIndex) => (
            <div key={dayIndex} className="bg-background p-2 min-h-[200px] border-t">
              <div className="space-y-1">
                {getSchedulesForDay(day).map((schedule) => (
                  <div
                    key={schedule.id}
                    onClick={() => onScheduleClick(schedule)}
                    className={`p-2 rounded-md text-xs cursor-pointer hover:opacity-80 ${getPriorityColor(schedule.priority)}`}
                    data-testid={`schedule-item-${schedule.id}`}
                  >
                    <div className="font-medium truncate">
                      {schedule.equipmentId}
                    </div>
                    <div className="text-xs opacity-75">
                      {schedule.maintenanceType}
                    </div>
                    {schedule.autoGenerated && (
                      <div className="flex items-center mt-1">
                        <Zap className="w-3 h-3 mr-1" />
                        <span className="text-xs">Auto</span>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}

export default function MaintenanceSchedules() {
  const [selectedSchedule, setSelectedSchedule] = useState<MaintenanceSchedule | null>(null);
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [createModalOpen, setCreateModalOpen] = useState(false);
  const [autoScheduleModalOpen, setAutoScheduleModalOpen] = useState(false);
  const [editForm, setEditForm] = useState<Partial<MaintenanceSchedule>>({});
  const [createForm, setCreateForm] = useState<Partial<InsertMaintenanceSchedule>>({
    equipmentId: '',
    scheduledDate: new Date(),
    maintenanceType: 'preventive',
    priority: 2,
    description: '',
  });
  const [autoScheduleForm, setAutoScheduleForm] = useState({
    equipmentId: '',
    pdmScore: 0,
  });
  const [filters, setFilters] = useState({
    equipmentId: '',
    status: '',
  });
  const { toast } = useToast();
  
  const { data: schedules, isLoading, error } = useQuery({
    queryKey: ["/api/maintenance-schedules", filters.equipmentId, filters.status],
    queryFn: () => {
      const params = new URLSearchParams();
      if (filters.equipmentId) params.append('equipmentId', filters.equipmentId);
      if (filters.status) params.append('status', filters.status);
      return apiRequest("GET", `/api/maintenance-schedules?${params.toString()}`);
    },
    refetchInterval: 60000,
  });
  
  const { data: upcomingSchedules } = useQuery({
    queryKey: ["/api/maintenance-schedules/upcoming"],
    queryFn: () => apiRequest("GET", "/api/maintenance-schedules/upcoming?days=7"),
    refetchInterval: 60000,
  });

  const createMutation = useMutation({
    mutationFn: (data: InsertMaintenanceSchedule) => 
      apiRequest("POST", "/api/maintenance-schedules", data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/maintenance-schedules"] });
      setCreateModalOpen(false);
      setCreateForm({ 
        equipmentId: '', 
        scheduledDate: new Date(), 
        maintenanceType: 'preventive', 
        priority: 2,
        description: '' 
      });
      toast({ title: "Maintenance schedule created successfully" });
    },
    onError: (error: any) => {
      toast({ 
        title: "Failed to create schedule", 
        description: error?.message || "An error occurred",
        variant: "destructive" 
      });
    }
  });

  const updateMutation = useMutation({
    mutationFn: (data: { id: string; updates: Partial<InsertMaintenanceSchedule> }) => 
      apiRequest("PUT", `/api/maintenance-schedules/${data.id}`, data.updates),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/maintenance-schedules"] });
      setEditModalOpen(false);
      setSelectedSchedule(null);
      setEditForm({});
      toast({ title: "Schedule updated successfully" });
    },
    onError: (error: any) => {
      toast({ 
        title: "Failed to update schedule", 
        description: error?.message || "An error occurred",
        variant: "destructive" 
      });
    }
  });

  const deleteMutation = useMutation({
    mutationFn: (id: string) => 
      apiRequest("DELETE", `/api/maintenance-schedules/${id}`),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/maintenance-schedules"] });
      toast({ title: "Schedule deleted successfully" });
    },
    onError: (error: any) => {
      toast({ 
        title: "Failed to delete schedule", 
        description: error?.message || "An error occurred",
        variant: "destructive" 
      });
    }
  });
  
  const autoScheduleMutation = useMutation({
    mutationFn: (data: { equipmentId: string; pdmScore: number }) => 
      apiRequest("POST", `/api/maintenance-schedules/auto-schedule/${data.equipmentId}`, { pdmScore: data.pdmScore }),
    onSuccess: (result) => {
      queryClient.invalidateQueries({ queryKey: ["/api/maintenance-schedules"] });
      setAutoScheduleModalOpen(false);
      setAutoScheduleForm({ equipmentId: '', pdmScore: 0 });
      
      if (result && (result as any).id) {
        toast({ title: "Maintenance automatically scheduled" });
      } else {
        toast({ title: "No automatic scheduling needed", description: "Equipment is in good condition" });
      }
    },
    onError: (error: any) => {
      toast({ 
        title: "Failed to auto-schedule", 
        description: error?.message || "An error occurred",
        variant: "destructive" 
      });
    }
  });

  const handleViewSchedule = (schedule: MaintenanceSchedule) => {
    setSelectedSchedule(schedule);
    setViewModalOpen(true);
  };

  const handleEditSchedule = (schedule: MaintenanceSchedule) => {
    setSelectedSchedule(schedule);
    setEditForm({
      equipmentId: schedule.equipmentId,
      scheduledDate: schedule.scheduledDate,
      maintenanceType: schedule.maintenanceType,
      priority: schedule.priority,
      status: schedule.status,
      description: schedule.description,
      assignedTo: schedule.assignedTo,
    });
    setEditModalOpen(true);
  };

  const handleDeleteSchedule = (schedule: MaintenanceSchedule) => {
    if (confirm(`Are you sure you want to delete the schedule for "${schedule.equipmentId}"? This action cannot be undone.`)) {
      deleteMutation.mutate(schedule.id);
    }
  };

  const handleCreateSchedule = () => {
    setCreateModalOpen(true);
  };
  
  const handleAutoSchedule = () => {
    setAutoScheduleModalOpen(true);
  };

  const handleCreateSubmit = () => {
    if (!createForm.equipmentId || !createForm.scheduledDate || !createForm.maintenanceType) {
      toast({ 
        title: "Please fill in required fields", 
        variant: "destructive" 
      });
      return;
    }
    createMutation.mutate(createForm as InsertMaintenanceSchedule);
  };

  const handleEditSubmit = () => {
    if (!selectedSchedule || !editForm.equipmentId || !editForm.scheduledDate || !editForm.maintenanceType) {
      toast({ 
        title: "Please fill in required fields", 
        variant: "destructive" 
      });
      return;
    }
    updateMutation.mutate({ 
      id: selectedSchedule.id, 
      updates: editForm as Partial<InsertMaintenanceSchedule>
    });
  };
  
  const handleAutoScheduleSubmit = () => {
    if (!autoScheduleForm.equipmentId || autoScheduleForm.pdmScore < 0 || autoScheduleForm.pdmScore > 100) {
      toast({ 
        title: "Please provide valid equipment ID and PdM score (0-100)", 
        variant: "destructive" 
      });
      return;
    }
    autoScheduleMutation.mutate(autoScheduleForm);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'scheduled': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';
      case 'in_progress': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
      case 'completed': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
      case 'cancelled': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
    }
  };

  const getPriorityText = (priority: number) => {
    switch (priority) {
      case 1: return 'High';
      case 2: return 'Medium';
      case 3: return 'Low';
      default: return 'Unknown';
    }
  };

  if (isLoading) {
    return (
      <div className="p-6">
        <div className="space-y-6">
          <div className="h-8 bg-muted animate-pulse rounded"></div>
          <div className="h-64 bg-muted animate-pulse rounded"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="pt-6">
            <div className="text-center text-red-600">
              Failed to load maintenance schedules
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold text-foreground">Maintenance Schedules</h1>
          <p className="text-muted-foreground">Manage predictive maintenance scheduling</p>
        </div>
        <div className="flex flex-wrap gap-2">
          <Button 
            onClick={handleAutoSchedule}
            variant="outline"
            className="flex items-center gap-2"
            data-testid="button-auto-schedule"
          >
            <Zap className="w-4 h-4" />
            Auto Schedule
          </Button>
          <Button 
            onClick={handleCreateSchedule}
            className="flex items-center gap-2"
            data-testid="button-create-schedule"
          >
            <Plus className="w-4 h-4" />
            New Schedule
          </Button>
        </div>
      </div>

      {/* Upcoming Schedules Summary */}
      {upcomingSchedules && Array.isArray(upcomingSchedules) && upcomingSchedules.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Clock className="w-5 h-5" />
              Upcoming This Week ({upcomingSchedules.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid gap-2">
              {(upcomingSchedules as MaintenanceSchedule[]).slice(0, 3).map((schedule: MaintenanceSchedule) => (
                <div key={schedule.id} className="flex items-center justify-between p-3 bg-muted rounded-lg">
                  <div>
                    <span className="font-medium">{schedule.equipmentId}</span>
                    <span className="text-sm text-muted-foreground ml-2">
                      {format(new Date(schedule.scheduledDate), 'MMM d, h:mm a')}
                    </span>
                  </div>
                  <Badge className={getStatusColor(schedule.status)}>
                    {schedule.status}
                  </Badge>
                </div>
              ))}
              {(upcomingSchedules as MaintenanceSchedule[]).length > 3 && (
                <div className="text-sm text-muted-foreground text-center">
                  +{(upcomingSchedules as MaintenanceSchedule[]).length - 3} more upcoming...
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle>Filters</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-wrap gap-4">
          <div className="space-y-2">
            <Label htmlFor="filter-equipment">Equipment ID</Label>
            <Input
              id="filter-equipment"
              placeholder="Filter by equipment..."
              value={filters.equipmentId}
              onChange={(e) => setFilters(prev => ({ ...prev, equipmentId: e.target.value }))}
              className="w-48"
              data-testid="input-filter-equipment"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="filter-status">Status</Label>
            <Select 
              value={filters.status} 
              onValueChange={(value) => setFilters(prev => ({ ...prev, status: value }))}
            >
              <SelectTrigger className="w-48" data-testid="select-filter-status">
                <SelectValue placeholder="All statuses" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">All statuses</SelectItem>
                <SelectItem value="scheduled">Scheduled</SelectItem>
                <SelectItem value="in_progress">In Progress</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
                <SelectItem value="cancelled">Cancelled</SelectItem>
              </SelectContent>
            </Select>
          </div>
          {(filters.equipmentId || filters.status) && (
            <div className="flex items-end">
              <Button 
                variant="outline" 
                onClick={() => setFilters({ equipmentId: '', status: '' })}
                data-testid="button-clear-filters"
              >
                Clear Filters
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Calendar and Table Views */}
      <Tabs defaultValue="calendar" className="space-y-4">
        <TabsList>
          <TabsTrigger value="calendar" data-testid="tab-calendar">
            <Calendar className="w-4 h-4 mr-2" />
            Calendar
          </TabsTrigger>
          <TabsTrigger value="list" data-testid="tab-list">
            <List className="w-4 h-4 mr-2" />
            List
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="calendar">
          <CalendarView 
            schedules={(schedules as unknown as MaintenanceSchedule[]) || []} 
            onScheduleClick={handleViewSchedule}
          />
        </TabsContent>
        
        <TabsContent value="list">
          <Card>
            <CardHeader>
              <CardTitle>All Schedules</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Equipment</TableHead>
                    <TableHead>Scheduled Date</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Priority</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Assigned To</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {schedules && Array.isArray(schedules) && schedules.length > 0 ? (
                    (schedules as MaintenanceSchedule[]).map((schedule: MaintenanceSchedule) => (
                      <TableRow key={schedule.id} data-testid={`row-schedule-${schedule.id}`}>
                        <TableCell className="font-medium">
                          <div className="flex items-center gap-2">
                            {schedule.equipmentId}
                            {schedule.autoGenerated && (
                              <Badge variant="outline" className="text-xs">
                                <Zap className="w-3 h-3 mr-1" />
                                Auto
                              </Badge>
                            )}
                          </div>
                        </TableCell>
                        <TableCell data-testid={`text-scheduled-date-${schedule.id}`}>
                          {format(new Date(schedule.scheduledDate), 'MMM d, yyyy h:mm a')}
                        </TableCell>
                        <TableCell>
                          <Badge variant="outline">
                            {schedule.maintenanceType}
                          </Badge>
                        </TableCell>
                        <TableCell data-testid={`text-priority-${schedule.id}`}>
                          {getPriorityText(schedule.priority)}
                        </TableCell>
                        <TableCell>
                          <Badge className={getStatusColor(schedule.status)}>
                            {schedule.status}
                          </Badge>
                        </TableCell>
                        <TableCell data-testid={`text-assigned-to-${schedule.id}`}>
                          {schedule.assignedTo || 'Unassigned'}
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end gap-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleViewSchedule(schedule)}
                              data-testid={`button-view-${schedule.id}`}
                            >
                              <Eye className="w-4 h-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleEditSchedule(schedule)}
                              data-testid={`button-edit-${schedule.id}`}
                            >
                              <Edit className="w-4 h-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleDeleteSchedule(schedule)}
                              data-testid={`button-delete-${schedule.id}`}
                            >
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={7} className="text-center text-muted-foreground">
                        No maintenance schedules found
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* View Modal */}
      <Dialog open={viewModalOpen} onOpenChange={setViewModalOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Maintenance Schedule Details</DialogTitle>
            <DialogDescription>
              View complete schedule information
            </DialogDescription>
          </DialogHeader>
          {selectedSchedule && (
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label className="text-sm font-medium">Equipment ID</Label>
                  <p className="text-sm text-muted-foreground">{selectedSchedule.equipmentId}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Scheduled Date</Label>
                  <p className="text-sm text-muted-foreground">
                    {format(new Date(selectedSchedule.scheduledDate), 'PPP p')}
                  </p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Maintenance Type</Label>
                  <p className="text-sm text-muted-foreground">{selectedSchedule.maintenanceType}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Priority</Label>
                  <p className="text-sm text-muted-foreground">{getPriorityText(selectedSchedule.priority)}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Status</Label>
                  <Badge className={getStatusColor(selectedSchedule.status)}>
                    {selectedSchedule.status}
                  </Badge>
                </div>
                <div>
                  <Label className="text-sm font-medium">Assigned To</Label>
                  <p className="text-sm text-muted-foreground">{selectedSchedule.assignedTo || 'Unassigned'}</p>
                </div>
                {selectedSchedule.pdmScore && (
                  <div>
                    <Label className="text-sm font-medium">PdM Score</Label>
                    <p className="text-sm text-muted-foreground">{selectedSchedule.pdmScore}</p>
                  </div>
                )}
                {selectedSchedule.estimatedDuration && (
                  <div>
                    <Label className="text-sm font-medium">Estimated Duration</Label>
                    <p className="text-sm text-muted-foreground">{selectedSchedule.estimatedDuration} minutes</p>
                  </div>
                )}
              </div>
              {selectedSchedule.description && (
                <div>
                  <Label className="text-sm font-medium">Description</Label>
                  <p className="text-sm text-muted-foreground">{selectedSchedule.description}</p>
                </div>
              )}
              <div className="grid grid-cols-2 gap-4 pt-4 border-t">
                <div>
                  <Label className="text-sm font-medium">Created</Label>
                  <p className="text-sm text-muted-foreground">
                    {selectedSchedule.createdAt ? format(new Date(selectedSchedule.createdAt), 'PPP p') : 'N/A'}
                  </p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Last Updated</Label>
                  <p className="text-sm text-muted-foreground">
                    {selectedSchedule.updatedAt ? format(new Date(selectedSchedule.updatedAt), 'PPP p') : 'N/A'}
                  </p>
                </div>
              </div>
              {selectedSchedule.autoGenerated && (
                <div className="flex items-center gap-2 p-3 bg-muted rounded-lg">
                  <Zap className="w-4 h-4 text-blue-500" />
                  <span className="text-sm">This schedule was automatically generated based on PdM scoring</span>
                </div>
              )}
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Create Modal */}
      <Dialog open={createModalOpen} onOpenChange={setCreateModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Create Maintenance Schedule</DialogTitle>
            <DialogDescription>
              Schedule maintenance for equipment
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="create-equipment">Equipment ID *</Label>
              <Input
                id="create-equipment"
                placeholder="e.g., ENG1, PUMP1"
                value={createForm.equipmentId}
                onChange={(e) => setCreateForm(prev => ({ ...prev, equipmentId: e.target.value }))}
                data-testid="input-create-equipment"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="create-date">Scheduled Date *</Label>
              <Input
                id="create-date"
                type="datetime-local"
                value={createForm.scheduledDate ? format(new Date(createForm.scheduledDate), "yyyy-MM-dd'T'HH:mm") : ''}
                onChange={(e) => setCreateForm(prev => ({ ...prev, scheduledDate: new Date(e.target.value) }))}
                data-testid="input-create-date"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="create-type">Maintenance Type *</Label>
              <Select 
                value={createForm.maintenanceType} 
                onValueChange={(value) => setCreateForm(prev => ({ ...prev, maintenanceType: value as any }))}
              >
                <SelectTrigger data-testid="select-create-type">
                  <SelectValue placeholder="Select type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="preventive">Preventive</SelectItem>
                  <SelectItem value="corrective">Corrective</SelectItem>
                  <SelectItem value="predictive">Predictive</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="create-priority">Priority</Label>
              <Select 
                value={createForm.priority?.toString()} 
                onValueChange={(value) => setCreateForm(prev => ({ ...prev, priority: parseInt(value) }))}
              >
                <SelectTrigger data-testid="select-create-priority">
                  <SelectValue placeholder="Select priority" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">High</SelectItem>
                  <SelectItem value="2">Medium</SelectItem>
                  <SelectItem value="3">Low</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="create-assigned">Assigned To</Label>
              <Input
                id="create-assigned"
                placeholder="Technician or team name"
                value={createForm.assignedTo || ''}
                onChange={(e) => setCreateForm(prev => ({ ...prev, assignedTo: e.target.value }))}
                data-testid="input-create-assigned"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="create-duration">Estimated Duration (minutes)</Label>
              <Input
                id="create-duration"
                type="number"
                placeholder="120"
                value={createForm.estimatedDuration?.toString() || ''}
                onChange={(e) => setCreateForm(prev => ({ ...prev, estimatedDuration: parseInt(e.target.value) || undefined }))}
                data-testid="input-create-duration"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="create-description">Description</Label>
              <Textarea
                id="create-description"
                placeholder="Describe the maintenance work..."
                value={createForm.description || ''}
                onChange={(e) => setCreateForm(prev => ({ ...prev, description: e.target.value }))}
                data-testid="input-create-description"
              />
            </div>
            <div className="flex justify-end space-x-2">
              <Button 
                variant="outline" 
                onClick={() => setCreateModalOpen(false)}
                data-testid="button-create-cancel"
              >
                Cancel
              </Button>
              <Button 
                onClick={handleCreateSubmit}
                disabled={createMutation.isPending}
                data-testid="button-create-submit"
              >
                {createMutation.isPending ? "Creating..." : "Create Schedule"}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Edit Modal */}
      <Dialog open={editModalOpen} onOpenChange={setEditModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Maintenance Schedule</DialogTitle>
            <DialogDescription>
              Update schedule information
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="edit-equipment">Equipment ID *</Label>
              <Input
                id="edit-equipment"
                placeholder="e.g., ENG1, PUMP1"
                value={editForm.equipmentId}
                onChange={(e) => setEditForm(prev => ({ ...prev, equipmentId: e.target.value }))}
                data-testid="input-edit-equipment"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="edit-date">Scheduled Date *</Label>
              <Input
                id="edit-date"
                type="datetime-local"
                value={editForm.scheduledDate ? format(new Date(editForm.scheduledDate), "yyyy-MM-dd'T'HH:mm") : ''}
                onChange={(e) => setEditForm(prev => ({ ...prev, scheduledDate: new Date(e.target.value) }))}
                data-testid="input-edit-date"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="edit-type">Maintenance Type *</Label>
              <Select 
                value={editForm.maintenanceType} 
                onValueChange={(value) => setEditForm(prev => ({ ...prev, maintenanceType: value as any }))}
              >
                <SelectTrigger data-testid="select-edit-type">
                  <SelectValue placeholder="Select type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="preventive">Preventive</SelectItem>
                  <SelectItem value="corrective">Corrective</SelectItem>
                  <SelectItem value="predictive">Predictive</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="edit-priority">Priority</Label>
              <Select 
                value={editForm.priority?.toString()} 
                onValueChange={(value) => setEditForm(prev => ({ ...prev, priority: parseInt(value) }))}
              >
                <SelectTrigger data-testid="select-edit-priority">
                  <SelectValue placeholder="Select priority" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">High</SelectItem>
                  <SelectItem value="2">Medium</SelectItem>
                  <SelectItem value="3">Low</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="edit-status">Status</Label>
              <Select 
                value={editForm.status} 
                onValueChange={(value) => setEditForm(prev => ({ ...prev, status: value as any }))}
              >
                <SelectTrigger data-testid="select-edit-status">
                  <SelectValue placeholder="Select status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="scheduled">Scheduled</SelectItem>
                  <SelectItem value="in_progress">In Progress</SelectItem>
                  <SelectItem value="completed">Completed</SelectItem>
                  <SelectItem value="cancelled">Cancelled</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="edit-assigned">Assigned To</Label>
              <Input
                id="edit-assigned"
                placeholder="Technician or team name"
                value={editForm.assignedTo || ''}
                onChange={(e) => setEditForm(prev => ({ ...prev, assignedTo: e.target.value }))}
                data-testid="input-edit-assigned"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="edit-description">Description</Label>
              <Textarea
                id="edit-description"
                placeholder="Describe the maintenance work..."
                value={editForm.description || ''}
                onChange={(e) => setEditForm(prev => ({ ...prev, description: e.target.value }))}
                data-testid="input-edit-description"
              />
            </div>
            <div className="flex justify-end space-x-2">
              <Button 
                variant="outline" 
                onClick={() => setEditModalOpen(false)}
                data-testid="button-edit-cancel"
              >
                Cancel
              </Button>
              <Button 
                onClick={handleEditSubmit}
                disabled={updateMutation.isPending}
                data-testid="button-edit-submit"
              >
                {updateMutation.isPending ? "Updating..." : "Update Schedule"}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Auto Schedule Modal */}
      <Dialog open={autoScheduleModalOpen} onOpenChange={setAutoScheduleModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Zap className="w-5 h-5" />
              Auto Schedule Maintenance
            </DialogTitle>
            <DialogDescription>
              Automatically schedule maintenance based on PdM score
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="auto-equipment">Equipment ID *</Label>
              <Input
                id="auto-equipment"
                placeholder="e.g., ENG1, PUMP1"
                value={autoScheduleForm.equipmentId}
                onChange={(e) => setAutoScheduleForm(prev => ({ ...prev, equipmentId: e.target.value }))}
                data-testid="input-auto-equipment"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="auto-score">PdM Score (0-100) *</Label>
              <Input
                id="auto-score"
                type="number"
                min="0"
                max="100"
                placeholder="50"
                value={autoScheduleForm.pdmScore}
                onChange={(e) => setAutoScheduleForm(prev => ({ ...prev, pdmScore: parseFloat(e.target.value) || 0 }))}
                data-testid="input-auto-score"
              />
              <p className="text-xs text-muted-foreground">
                Lower scores indicate higher maintenance priority. Scores below 30 schedule immediate maintenance, scores below 60 schedule within a week.
              </p>
            </div>
            <div className="flex justify-end space-x-2">
              <Button 
                variant="outline" 
                onClick={() => setAutoScheduleModalOpen(false)}
                data-testid="button-auto-cancel"
              >
                Cancel
              </Button>
              <Button 
                onClick={handleAutoScheduleSubmit}
                disabled={autoScheduleMutation.isPending}
                data-testid="button-auto-submit"
              >
                {autoScheduleMutation.isPending ? "Scheduling..." : "Auto Schedule"}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}