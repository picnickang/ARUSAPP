import { sql } from "drizzle-orm";
import { pgTable, text, varchar, integer, real, timestamp, boolean } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const devices = pgTable("devices", {
  id: varchar("id").primaryKey(),
  vessel: text("vessel"),
  buses: text("buses"), // JSON string array
  sensors: text("sensors"), // JSON string array
  config: text("config"), // JSON object
  hmacKey: text("hmac_key"),
  updatedAt: timestamp("updated_at", { mode: "date" }).defaultNow(),
});

export const edgeHeartbeats = pgTable("edge_heartbeats", {
  deviceId: varchar("device_id").primaryKey(),
  ts: timestamp("ts", { mode: "date" }).defaultNow(),
  cpuPct: real("cpu_pct"),
  memPct: real("mem_pct"),
  diskFreeGb: real("disk_free_gb"),
  bufferRows: integer("buffer_rows"),
  swVersion: text("sw_version"),
});

export const pdmScoreLogs = pgTable("pdm_score_logs", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  ts: timestamp("ts", { mode: "date" }).defaultNow(),
  equipmentId: text("equipment_id").notNull(),
  healthIdx: real("health_idx"),
  pFail30d: real("p_fail_30d"),
  predictedDueDate: timestamp("predicted_due_date", { mode: "date" }),
  contextJson: text("context_json"), // JSON object
});

export const workOrders = pgTable("work_orders", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  equipmentId: text("equipment_id").notNull(),
  status: text("status").notNull().default("open"),
  priority: integer("priority").notNull().default(3),
  reason: text("reason"),
  description: text("description"),
  createdAt: timestamp("created_at", { mode: "date" }).defaultNow(),
});

export const equipmentTelemetry = pgTable("equipment_telemetry", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  ts: timestamp("ts", { mode: "date" }).defaultNow(),
  equipmentId: text("equipment_id").notNull(),
  sensorType: text("sensor_type").notNull(), // temperature, vibration, pressure, flow_rate, etc.
  value: real("value").notNull(),
  unit: text("unit").notNull(), // celsius, hz, psi, gpm, etc.
  threshold: real("threshold"), // alert threshold value
  status: text("status").notNull().default("normal"), // normal, warning, critical
});

export const alertConfigurations = pgTable("alert_configurations", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  equipmentId: text("equipment_id").notNull(),
  sensorType: text("sensor_type").notNull(), // temperature, pressure, voltage, etc.
  warningThreshold: real("warning_threshold"),
  criticalThreshold: real("critical_threshold"),
  enabled: boolean("enabled").default(true),
  notifyEmail: boolean("notify_email").default(false),
  notifyInApp: boolean("notify_in_app").default(true),
  createdAt: timestamp("created_at", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updated_at", { mode: "date" }).defaultNow(),
});

export const alertNotifications = pgTable("alert_notifications", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  equipmentId: text("equipment_id").notNull(),
  sensorType: text("sensor_type").notNull(),
  alertType: text("alert_type").notNull(), // warning, critical
  message: text("message").notNull(),
  value: real("value").notNull(),
  threshold: real("threshold").notNull(),
  acknowledged: boolean("acknowledged").default(false),
  acknowledgedAt: timestamp("acknowledged_at", { mode: "date" }),
  acknowledgedBy: text("acknowledged_by"),
  createdAt: timestamp("created_at", { mode: "date" }).defaultNow(),
});

export const systemSettings = pgTable("system_settings", {
  id: varchar("id").primaryKey().default("system"),
  hmacRequired: boolean("hmac_required").default(false),
  maxPayloadBytes: integer("max_payload_bytes").default(2097152),
  strictUnits: boolean("strict_units").default(false),
  llmEnabled: boolean("llm_enabled").default(true),
  llmModel: text("llm_model").default("gpt-4o-mini"),
});

export const maintenanceSchedules = pgTable("maintenance_schedules", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  equipmentId: text("equipment_id").notNull(),
  scheduledDate: timestamp("scheduled_date", { mode: "date" }).notNull(),
  maintenanceType: text("maintenance_type").notNull(), // preventive, corrective, predictive
  priority: integer("priority").notNull().default(2), // 1=high, 2=medium, 3=low
  estimatedDuration: integer("estimated_duration"), // minutes
  description: text("description"),
  status: text("status").notNull().default("scheduled"), // scheduled, in_progress, completed, cancelled
  assignedTo: text("assigned_to"), // technician or team
  pdmScore: real("pdm_score"), // PdM score that triggered this schedule
  autoGenerated: boolean("auto_generated").default(false), // true if automatically scheduled by algorithm
  workOrderId: text("work_order_id"), // linked work order if created
  createdAt: timestamp("created_at", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updated_at", { mode: "date" }).defaultNow(),
});

export const maintenanceRecords = pgTable("maintenance_records", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  scheduleId: text("schedule_id").notNull(), // references maintenance_schedules.id
  equipmentId: text("equipment_id").notNull(),
  maintenanceType: text("maintenance_type").notNull(), // preventive, corrective, predictive
  actualStartTime: timestamp("actual_start_time", { mode: "date" }),
  actualEndTime: timestamp("actual_end_time", { mode: "date" }),
  actualDuration: integer("actual_duration"), // minutes
  technician: text("technician"),
  notes: text("notes"),
  partsUsed: text("parts_used"), // JSON array of parts
  laborHours: real("labor_hours"),
  downtimeMinutes: integer("downtime_minutes"),
  completionStatus: text("completion_status").notNull().default("completed"), // completed, partial, failed
  followUpRequired: boolean("follow_up_required").default(false),
  createdAt: timestamp("created_at", { mode: "date" }).defaultNow(),
});

export const maintenanceCosts = pgTable("maintenance_costs", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  recordId: text("record_id").notNull(), // references maintenance_records.id
  scheduleId: text("schedule_id"), // references maintenance_schedules.id
  equipmentId: text("equipment_id").notNull(),
  costType: text("cost_type").notNull(), // labor, parts, equipment, downtime
  amount: real("amount").notNull(), // cost amount
  currency: text("currency").notNull().default("USD"),
  description: text("description"),
  vendor: text("vendor"), // for parts/equipment costs
  category: text("category"), // routine, emergency, upgrade, repair
  createdAt: timestamp("created_at", { mode: "date" }).defaultNow(),
});

export const equipmentLifecycle = pgTable("equipment_lifecycle", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  equipmentId: text("equipment_id").notNull().unique(),
  manufacturer: text("manufacturer"),
  model: text("model"),
  serialNumber: text("serial_number"),
  installationDate: timestamp("installation_date", { mode: "date" }),
  warrantyExpiry: timestamp("warranty_expiry", { mode: "date" }),
  expectedLifespan: integer("expected_lifespan"), // months
  replacementCost: real("replacement_cost"),
  operatingHours: integer("operating_hours").default(0),
  maintenanceCount: integer("maintenance_count").default(0),
  lastMajorOverhaul: timestamp("last_major_overhaul", { mode: "date" }),
  nextRecommendedReplacement: timestamp("next_recommended_replacement", { mode: "date" }),
  condition: text("condition").notNull().default("good"), // excellent, good, fair, poor, critical
  notes: text("notes"),
  createdAt: timestamp("created_at", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updated_at", { mode: "date" }).defaultNow(),
});

export const performanceMetrics = pgTable("performance_metrics", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  equipmentId: text("equipment_id").notNull(),
  metricDate: timestamp("metric_date", { mode: "date" }).notNull(),
  efficiency: real("efficiency"), // percentage 0-100
  reliability: real("reliability"), // percentage 0-100
  availability: real("availability"), // percentage 0-100
  meanTimeBetweenFailures: real("mtbf_hours"), // hours
  meanTimeToRepair: real("mttr_hours"), // hours
  totalDowntime: integer("total_downtime_minutes"), // minutes
  plannedDowntime: integer("planned_downtime_minutes"), // minutes
  unplannedDowntime: integer("unplanned_downtime_minutes"), // minutes
  operatingHours: real("operating_hours"),
  energyConsumption: real("energy_consumption"), // kWh
  performanceScore: real("performance_score"), // calculated composite score 0-100
  notes: text("notes"),
  createdAt: timestamp("created_at", { mode: "date" }).defaultNow(),
});

export const alertSuppressions = pgTable("alert_suppressions", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  equipmentId: text("equipment_id").notNull(),
  sensorType: text("sensor_type").notNull(),
  alertType: text("alert_type"), // warning, critical, or null for all
  suppressedBy: text("suppressed_by").notNull(),
  reason: text("reason"),
  suppressUntil: timestamp("suppress_until", { mode: "date" }).notNull(),
  active: boolean("active").default(true),
  createdAt: timestamp("created_at", { mode: "date" }).defaultNow(),
});

export const alertComments = pgTable("alert_comments", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  alertId: text("alert_id").notNull(),
  comment: text("comment").notNull(),
  commentedBy: text("commented_by").notNull(),
  createdAt: timestamp("created_at", { mode: "date" }).defaultNow(),
});

// Insert schemas
export const insertDeviceSchema = createInsertSchema(devices).omit({
  updatedAt: true,
});

export const insertHeartbeatSchema = createInsertSchema(edgeHeartbeats).omit({
  ts: true,
});

export const insertPdmScoreSchema = createInsertSchema(pdmScoreLogs).omit({
  id: true,
  ts: true,
});

export const insertWorkOrderSchema = createInsertSchema(workOrders).omit({
  id: true,
  createdAt: true,
});

export const insertTelemetrySchema = createInsertSchema(equipmentTelemetry).omit({
  id: true,
  ts: true,
});

export const insertAlertConfigSchema = createInsertSchema(alertConfigurations).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertAlertNotificationSchema = createInsertSchema(alertNotifications).omit({
  id: true,
  createdAt: true,
});

export const insertSettingsSchema = createInsertSchema(systemSettings).omit({
  id: true,
});

export const insertMaintenanceScheduleSchema = createInsertSchema(maintenanceSchedules).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
}).extend({
  maintenanceType: z.enum(['preventive', 'corrective', 'predictive']),
  status: z.enum(['scheduled', 'in_progress', 'completed', 'cancelled']).default('scheduled'),
  priority: z.number().min(1).max(3).default(2),
  pdmScore: z.number().min(0).max(100).optional(),
});

export const insertMaintenanceRecordSchema = createInsertSchema(maintenanceRecords).omit({
  id: true,
  createdAt: true,
}).extend({
  maintenanceType: z.enum(['preventive', 'corrective', 'predictive']),
  completionStatus: z.enum(['completed', 'partial', 'failed']).default('completed'),
  laborHours: z.number().min(0).optional(),
  downtimeMinutes: z.number().min(0).optional(),
});

export const insertMaintenanceCostSchema = createInsertSchema(maintenanceCosts).omit({
  id: true,
  createdAt: true,
}).extend({
  costType: z.enum(['labor', 'parts', 'equipment', 'downtime']),
  amount: z.number().min(0),
  currency: z.string().length(3).default('USD'),
  category: z.enum(['routine', 'emergency', 'upgrade', 'repair']).optional(),
});

export const insertEquipmentLifecycleSchema = createInsertSchema(equipmentLifecycle).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
}).extend({
  condition: z.enum(['excellent', 'good', 'fair', 'poor', 'critical']).default('good'),
  expectedLifespan: z.number().min(0).optional(),
  operatingHours: z.number().min(0).default(0),
  maintenanceCount: z.number().min(0).default(0),
});

export const insertPerformanceMetricSchema = createInsertSchema(performanceMetrics).omit({
  id: true,
  createdAt: true,
}).extend({
  efficiency: z.number().min(0).max(100).optional(),
  reliability: z.number().min(0).max(100).optional(),
  availability: z.number().min(0).max(100).optional(),
  performanceScore: z.number().min(0).max(100).optional(),
  meanTimeBetweenFailures: z.number().min(0).optional(),
  meanTimeToRepair: z.number().min(0).optional(),
});

export const insertAlertSuppressionSchema = createInsertSchema(alertSuppressions).omit({
  id: true,
  createdAt: true,
}).extend({
  alertType: z.enum(['warning', 'critical']).optional(),
  suppressUntil: z.coerce.date(),
});

export const insertAlertCommentSchema = createInsertSchema(alertComments).omit({
  id: true,
  createdAt: true,
});

// Raw telemetry ingestion table for manual CSV/JSON imports
export const rawTelemetry = pgTable("raw_telemetry", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  vessel: text("vessel").notNull(),
  ts: timestamp("ts", { mode: "date" }).notNull(),
  src: text("src").notNull(), // source/device identifier  
  sig: text("sig").notNull(), // signal/metric name
  value: real("value"),
  unit: text("unit"),
  createdAt: timestamp("created_at", { mode: "date" }).defaultNow(),
});

// Transport settings for telemetry ingestion configuration
export const transportSettings = pgTable("transport_settings", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  enableHttpIngest: boolean("enable_http_ingest").default(true),
  enableMqttIngest: boolean("enable_mqtt_ingest").default(false),
  mqttHost: text("mqtt_host"),
  mqttPort: integer("mqtt_port").default(8883),
  mqttUser: text("mqtt_user"),
  mqttPass: text("mqtt_pass"),
  mqttTopic: text("mqtt_topic").default("fleet/+/telemetry"),
  updatedAt: timestamp("updated_at", { mode: "date" }).defaultNow(),
});

// Zod schemas for raw telemetry
export const insertRawTelemetrySchema = createInsertSchema(rawTelemetry).omit({
  id: true,
  createdAt: true,
});

// Zod schemas for transport settings
export const insertTransportSettingsSchema = createInsertSchema(transportSettings).omit({
  id: true,
  updatedAt: true,
});

// Types
export type Device = typeof devices.$inferSelect;
export type InsertDevice = z.infer<typeof insertDeviceSchema>;

export type EdgeHeartbeat = typeof edgeHeartbeats.$inferSelect;
export type InsertHeartbeat = z.infer<typeof insertHeartbeatSchema>;

export type PdmScoreLog = typeof pdmScoreLogs.$inferSelect;
export type InsertPdmScore = z.infer<typeof insertPdmScoreSchema>;

export type WorkOrder = typeof workOrders.$inferSelect;
export type InsertWorkOrder = z.infer<typeof insertWorkOrderSchema>;

export type EquipmentTelemetry = typeof equipmentTelemetry.$inferSelect;
export type InsertTelemetry = z.infer<typeof insertTelemetrySchema>;

export type AlertConfiguration = typeof alertConfigurations.$inferSelect;
export type InsertAlertConfig = z.infer<typeof insertAlertConfigSchema>;

export type AlertNotification = typeof alertNotifications.$inferSelect;
export type InsertAlertNotification = z.infer<typeof insertAlertNotificationSchema>;

export type SystemSettings = typeof systemSettings.$inferSelect;
export type InsertSettings = z.infer<typeof insertSettingsSchema>;

export type MaintenanceSchedule = typeof maintenanceSchedules.$inferSelect;
export type InsertMaintenanceSchedule = z.infer<typeof insertMaintenanceScheduleSchema>;

export type MaintenanceRecord = typeof maintenanceRecords.$inferSelect;
export type InsertMaintenanceRecord = z.infer<typeof insertMaintenanceRecordSchema>;

export type MaintenanceCost = typeof maintenanceCosts.$inferSelect;
export type InsertMaintenanceCost = z.infer<typeof insertMaintenanceCostSchema>;

export type EquipmentLifecycle = typeof equipmentLifecycle.$inferSelect;
export type InsertEquipmentLifecycle = z.infer<typeof insertEquipmentLifecycleSchema>;

export type PerformanceMetric = typeof performanceMetrics.$inferSelect;
export type InsertPerformanceMetric = z.infer<typeof insertPerformanceMetricSchema>;

export type RawTelemetry = typeof rawTelemetry.$inferSelect;
export type InsertRawTelemetry = z.infer<typeof insertRawTelemetrySchema>;

export type TransportSettings = typeof transportSettings.$inferSelect;
export type InsertTransportSettings = z.infer<typeof insertTransportSettingsSchema>;

export type AlertSuppression = typeof alertSuppressions.$inferSelect;
export type InsertAlertSuppression = z.infer<typeof insertAlertSuppressionSchema>;

export type AlertComment = typeof alertComments.$inferSelect;
export type InsertAlertComment = z.infer<typeof insertAlertCommentSchema>;

// API Response types
export type DeviceStatus = "Online" | "Warning" | "Critical" | "Offline";

export type DeviceWithStatus = Device & {
  status: DeviceStatus;
  lastHeartbeat?: EdgeHeartbeat;
};

export type EquipmentHealth = {
  id: string;
  vessel: string;
  healthIndex: number;
  predictedDueDays: number;
  status: "healthy" | "warning" | "critical";
};

export type DashboardMetrics = {
  activeDevices: number;
  fleetHealth: number;
  openWorkOrders: number;
  riskAlerts: number;
};

export type TelemetryDataPoint = {
  ts: Date;
  value: number;
  status: string;
};

export type TelemetryTrend = {
  equipmentId: string;
  sensorType: string;
  unit: string;
  currentValue: number;
  threshold?: number;
  status: string;
  data: TelemetryDataPoint[];
  trend: "increasing" | "decreasing" | "stable";
  changePercent: number;
};
