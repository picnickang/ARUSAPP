@echo off
setlocal ENABLEDELAYEDEXPANSION
REM ==================================================================
REM ARUS E2E Patch: Backend (Node/TS) + Frontend (React/TS)
REM - Crew Management: reassign/remove/on-duty in Crew tab
REM - Settings: Factory Reset ONLY (removes all other admin options)
REM - Works even if no backend existed before
REM ==================================================================

REM ---------- BACKEND ----------
if not exist "backend-node" mkdir backend-node
cd backend-node

REM package.json
> package.json echo {^
"name":"arus-backend",^
"version":"1.0.0",^
"type":"module",^
"private":true,^
"scripts":{"dev":"tsx watch src/index.ts","build":"tsc -p tsconfig.json","start":"node dist/index.js"},^
"dependencies":{ "express":"^4.19.2","better-sqlite3":"^9.4.0","pino-http":"^9.0.0","prom-client":"^15.1.3" },^
"devDependencies":{"tsx":"^4.19.0","typescript":"^5.4.5","@types/express":"^4.17.21","@types/node":"^22.5.4"}^
}

REM tsconfig.json
> tsconfig.json echo {^
"compilerOptions":{"target":"ES2022","module":"ES2022","moduleResolution":"Bundler","outDir":"dist","rootDir":"src","strict":true,"esModuleInterop":true,"skipLibCheck":true},^
"include":["src"]^
}

mkdir src
mkdir data

REM src/db.ts
> src\db.ts (
echo import Database from 'better-sqlite3';
echo import fs from 'node:fs';
echo fs.mkdirSync('data',{recursive:true});
echo const DB_PATH = process.env.SQLITE_PATH ?? 'data/arus.sqlite';
echo export const db = new Database(DB_PATH);
echo db.pragma('journal_mode = WAL');
echo db.exec(`
echo CREATE TABLE IF NOT EXISTS vessel(
echo id TEXT PRIMARY KEY,
echo name TEXT,
echo imo TEXT,
echo created_at TEXT
echo );
echo CREATE TABLE IF NOT EXISTS crew(
echo id TEXT PRIMARY KEY,
echo name TEXT,
echo rank TEXT,
echo vessel_id TEXT,
echo on_duty INTEGER DEFAULT 0,
echo created_at TEXT
echo );
echo CREATE TABLE IF NOT EXISTS idempotency(
echo key TEXT PRIMARY KEY,
echo endpoint TEXT,
echo ts TEXT
echo );
echo CREATE TABLE IF NOT EXISTS replay_incoming(
echo id INTEGER PRIMARY KEY AUTOINCREMENT,
echo device_id TEXT,
echo endpoint TEXT,
echo key TEXT,
echo received_at TEXT
echo );
echo CREATE TABLE IF NOT EXISTS sheet_lock(
echo sheet_key TEXT PRIMARY KEY, -- crew_id:year:month
echo token TEXT,
echo holder TEXT,
echo expires_at TEXT,
echo version INTEGER DEFAULT 1
echo );
echo `);
echo try { db.exec('ALTER TABLE crew ADD COLUMN on_duty INTEGER DEFAULT 0'); } catch(e) { /* already exists */ }
)

REM src/obs.ts
> src\obs.ts (
echo import { Request, Response, NextFunction } from 'express';
echo import { Counter, Histogram, register, collectDefaultMetrics } from 'prom-client';
echo collectDefaultMetrics();
echo export const REQS = new Counter({ name:'arus_http_requests_total', help:'HTTP requests', labelNames:['method','path','status'] as const });
echo export const LAT = new Histogram({ name:'arus_http_request_seconds', help:'HTTP request latency', labelNames:['method','path'] as const });
echo export const nowISO = () => new Date().toISOString();
echo export function loggingMetrics(){ return (req:Request,res:Response,next:NextFunction)=>{ const t=process.hrtime.bigint(); const m=req.method,p=req.path; res.on('finish',()=>{ const d=Number(process.hrtime.bigint()-t)/1e9; LAT.labels(m,p).observe(d); REQS.labels(m,p,String(res.statusCode)).inc(); }); next(); }; }
echo export async function metricsHandler(_req:Request,res:Response){ res.set('Content-Type', register.contentType); res.end(await register.metrics()); }
)

REM src/index.ts
> src\index.ts (
echo import express from 'express';
echo import pino from 'pino-http';
echo import { db } from './db.js';
echo import { loggingMetrics, metricsHandler } from './obs.js';
echo
echo const app = express();
echo app.use(express.json({limit:'1mb'}));
echo app.use(pino());
echo app.use(loggingMetrics());
echo
echo const ok = (res:express.Response, data:any) => res.json(data);
echo
echo app.get('/healthz', (_req,res)=> ok(res,{ok:true}));
echo app.get('/metrics', metricsHandler);
echo
echo // -------- VESSELS
echo app.get('/api/vessels', (_req,res)=>{ const rows=db.prepare('SELECT * FROM vessel ORDER BY name').all(); res.json(rows); });
echo app.post('/api/vessels', (req,res)=>{ const v=req.body||{}; if(!v.id||!v.name) return res.status(400).json({ok:false,error:'id,name required'}); db.prepare('INSERT OR REPLACE INTO vessel(id,name,imo,created_at) VALUES(?,?,?,datetime(''now''))').run(String(v.id), String(v.name), v.imo??null); ok(res,{ok:true}); });
echo
echo // -------- CREW
echo app.get('/api/crew', (req,res)=>{ const vid=String(req.query.vessel_id||''); const q = vid? 'SELECT * FROM crew WHERE vessel_id=? ORDER BY name' : 'SELECT * FROM crew ORDER BY name'; const rows = vid? db.prepare(q).all(vid): db.prepare(q).all(); res.json(rows); });
echo app.post('/api/crew', (req,res)=>{ const c=req.body||{}; if(!c.id||!c.name) return res.status(400).json({ok:false,error:'id,name required'}); if(!c.vessel_id) return res.status(400).json({ok:false,error:'vessel_id required'}); const v=db.prepare('SELECT id FROM vessel WHERE id=?').get(String(c.vessel_id)); if(!v) return res.status(400).json({ok:false,error:'vessel not found'}); db.prepare('INSERT OR REPLACE INTO crew(id,name,rank,vessel_id,on_duty,created_at) VALUES(?,?,?,?,?,datetime(''now''))').run(String(c.id), String(c.name), c.rank??null, String(c.vessel_id), c.on_duty?1:0); ok(res,{ok:true}); });
echo app.patch('/api/crew/:id', (req,res)=>{ const id=String(req.params.id); const b=req.body||{}; const fields:string[]=[]; const vals:any[]=[]; if(b.name!==undefined){fields.push('name=?');vals.push(String(b.name));} if(b.rank!==undefined){fields.push('rank=?');vals.push(String(b.rank));} if(b.vessel_id!==undefined){ const v=db.prepare('SELECT id FROM vessel WHERE id=?').get(String(b.vessel_id)); if(!v) return res.status(400).json({ok:false,error:'vessel not found'}); fields.push('vessel_id=?'); vals.push(String(b.vessel_id)); } if(b.on_duty!==undefined){ fields.push('on_duty=?'); vals.push(b.on_duty?1:0); } if(!fields.length) return res.status(400).json({ok:false,error:'no fields'}); const sql = \`UPDATE crew SET \${fields.join(', ')} WHERE id=?\`; vals.push(id); db.prepare(sql).run(...vals); ok(res,{ok:true}); });
echo app.delete('/api/crew/:id', (req,res)=>{ const id=String(req.params.id); db.prepare('DELETE FROM crew WHERE id=?').run(id); ok(res,{ok:true}); });
echo
echo // -------- SETTINGS / ADMIN
echo app.get('/api/admin/settings', (_req,res)=>{ const vc=db.prepare('SELECT COUNT(*) AS n FROM vessel').get() as any; const cc=db.prepare('SELECT COUNT(*) AS n FROM crew').get() as any; res.json({ok:true, counts:{vessels: vc?.n||0, crew: cc?.n||0}}); });
echo app.post('/api/admin/factory_reset', (req,res)=>{ const confirm=String((req.body||{}).confirm||''); if(confirm!=='RESET') return res.status(400).json({ok:false,error:'confirm must be \"RESET\"'}); db.transaction(()=>{ db.exec('DELETE FROM crew;'); db.exec('DELETE FROM vessel;'); db.exec('DELETE FROM idempotency;'); db.exec('DELETE FROM replay_incoming;'); db.exec('DELETE FROM sheet_lock;'); })(); ok(res,{ok:true}); });
echo
echo const PORT=Number(process.env.PORT||'8001');
echo app.listen(PORT,()=>console.log('ARUS backend on :'+PORT));
)

cd ..

REM ---------- FRONTEND ----------
if not exist "frontend" (
echo [INFO] Creating minimal React+TS frontend...
mkdir frontend
cd frontend
> package.json echo {^
"name":"arus-frontend",^
"version":"1.0.0",^
"private":true,^
"type":"module",^
"scripts":{"dev":"vite","build":"vite build","preview":"vite preview"},^
"dependencies":{"react":"^18.2.0","react-dom":"^18.2.0"},^
"devDependencies":{"vite":"^5.0.0","@vitejs/plugin-react":"^4.2.0","typescript":"^5.4.0"}^
}
> index.html echo ^<^!doctype html^>^<html lang="en"^>^<head^>^<meta charset="UTF-8" /^>^<meta name="viewport" content="width=device-width, initial-scale=1.0" /^>^<title^>ARUS^</title^>^</head^>^<body^>^<div id="root"^>^</div^>^<script type="module" src="/src/main.tsx"^>^</script^>^</body^>^</html^>
mkdir src
> src\main.tsx echo import React from 'react';^
import ReactDOM from 'react-dom/client';^
import App from './App';^
import './index.css';^
ReactDOM.createRoot(document.getElementById('root')!).render(^
React.createElement(React.StrictMode, null, React.createElement(App))^
);
> src\index.css echo body{margin:0;font-family:system-ui,sans-serif;background:#f8fafc;color:#0f172a} .card{background:#fff;border:1px solid #e2e8f0;border-radius:8px;padding:12px;margin:12px auto;max-width:900px;box-shadow:0 1px 2px rgba(0,0,0,.06)}
> src\App.tsx echo import CrewManagement from "./components/CrewManagement";^
import SettingsAdmin from "./components/SettingsAdmin";^
export default function App(){^
return (^
^<div^>^
^<div className="card"^>^<h1^>ARUS Console^</h1^>^</div^>^
^<div className="card"^>^<CrewManagement/^>^</div^>^
^<div className="card"^>^<SettingsAdmin/^>^</div^>^
^</div^>
)^
}
mkdir src\components
cd ..
) else (
echo [INFO] Frontend exists â€” will patch components and App.tsx.
)

REM Create/replace CrewManagement.tsx
> frontend\src\components\CrewManagement.tsx (
echo import React, { useEffect, useMemo, useState } from "react";
echo const BASE = (import.meta as any).env.VITE_API_URL || "http://localhost:8001";
echo type Vessel = { id:string; name?:string; imo?:string };
echo type Crew = { id:string; name?:string; rank?:string; vessel_id?:string; on_duty?:number };
echo export default function CrewManagement(){
echo const [vessels,setVessels]=useState<Vessel[]>([]);
echo const [crew,setCrew]=useState<Crew[]>([]);
echo const [vesselId,setVesselId]=useState<string>("");
echo const [busy,setBusy]=useState(false);
echo const [error,setError]=useState("");
echo async function loadVessels(){ try{ const v=await fetch(`${BASE}/api/vessels`).then(r=>r.json()); setVessels(v||[]);}catch(e:any){setError(e?.message||"");} }
echo async function loadCrew(id?:string){ try{ const url=id? `${BASE}/api/crew?vessel_id=${'${'}encodeURIComponent(id){'}'}`:`${BASE}/api/crew`; const c=await fetch(url).then(r=>r.json()); setCrew(c||[]);}catch(e:any){setError(e?.message||"");} }
echo useEffect(()=>{ loadVessels(); },[]);
echo useEffect(()=>{ loadCrew(vesselId||undefined); },[vesselId]);
echo const crewFiltered = useMemo(()=> vesselId? crew.filter(c=>c.vessel_id===vesselId): crew, [crew,vesselId]);
echo async function toggleDuty(c:Crew){ setBusy(true); setError(""); try{ await fetch(`${BASE}/api/crew/${'${'}c.id{'}'}`, {method:"PATCH", headers:{"Content-Type":"application/json"}, body: JSON.stringify({on_duty: !(c.on_duty??0)})}); await loadCrew(vesselId||undefined);} finally { setBusy(false);} }
echo async function reassign(c:Crew, newVesselId:string){ if(!newVesselId) return; setBusy(true); setError(""); try{ await fetch(`${BASE}/api/crew/${'${'}c.id{'}'}`, {method:"PATCH", headers:{"Content-Type":"application/json"}, body: JSON.stringify({vessel_id:newVesselId})}); await loadCrew(vesselId||undefined);} finally { setBusy(false);} }
echo async function removeCrew(c:Crew){ if(!confirm(`Remove crew ${'${'}c.name||c.id{'}'}? History remains.`)) return; setBusy(true); setError(""); try{ await fetch(`${BASE}/api/crew/${'${'}c.id{'}'}`, {method:"DELETE"}); await loadCrew(vesselId||undefined);} finally { setBusy(false);} }
echo return (
echo <div>
echo <h2>Crew Management</h2>
echo <div style={{display:"flex",gap:8,alignItems:"center",margin:"8px 0"}}>
echo <label style={{fontSize:12}}>Vessel:</label>
echo <select value={vesselId} onChange={e=>setVesselId(e.target.value)}>
echo <option value="">All vesselsâ€¦</option>
echo {vessels.map(v=>(<option key={v.id} value={v.id}>{v.name||v.id}</option>))}
echo </select>
echo {error && <span style={{color:"#b91c1c",fontSize:12}}>{error}</span>}
echo </div>
echo <table style={{width:"100%",fontSize:12,borderCollapse:"collapse"}}>
echo <thead><tr style={{background:"#f1f5f9"}}>
echo <th style={{textAlign:"left"}}>Crew</th><th>Rank</th><th>Current Vessel</th><th>Duty</th><th>Reassign</th><th>Actions</th>
echo </tr></thead>
echo <tbody>
echo {crewFiltered.map(c=>(
echo <tr key={c.id}>
echo <td style={{padding:"6px"}}>{c.name||c.id}</td>
echo <td style={{textAlign:"center"}}>{c.rank||"â€“"}</td>
echo <td style={{textAlign:"center"}}>{c.vessel_id||"(unassigned)"}</td>
echo <td style={{textAlign:"center"}}>
echo <label style={{display:"inline-flex",gap:6,alignItems:"center",cursor:"pointer"}}>
echo <input type="checkbox" checked={(c.on_duty??0)===1} onChange={()=>toggleDuty(c)} disabled={busy}/>
echo {(c.on_duty??0)===1 ? "On duty" : "Off duty"}
echo </label>
echo </td>
echo <td style={{textAlign:"center"}}>
echo <select defaultValue="" onChange={e=>{ const v=e.target.value; if(v) reassign(c,v); e.currentTarget.selectedIndex=0; }}>
echo <option value="">Select vesselâ€¦</option>
echo {vessels.map(v=>(<option key={v.id} value={v.id}>{v.name||v.id}</option>))}
echo </select>
echo </td>
echo <td style={{textAlign:"center"}}>
echo <button onClick={()=>removeCrew(c)} disabled={busy} style={{background:"#ef4444",color:"#fff",border:0,padding:"4px 8px",borderRadius:6}}>Remove</button>
echo </td>
echo </tr>
echo ))}
echo {crewFiltered.length===0 && (<tr><td colSpan={6} style={{padding:"8px",color:"#64748b"}}>No crew found.</td></tr>)}
echo </tbody>
echo </table>
echo </div>
echo );
echo }
)

REM Create/replace SettingsAdmin.tsx â€” Factory Reset ONLY
> frontend\src\components\SettingsAdmin.tsx (
echo import React, { useEffect, useState } from "react";
echo const BASE = (import.meta as any).env.VITE_API_URL || "http://localhost:8001";
echo export default function SettingsAdmin(){
echo const [stats,setStats]=useState<any>(null);
echo const [busy,setBusy]=useState(false);
echo useEffect(()=>{ (async()=>{ const s=await fetch(`${BASE}/api/admin/settings`).then(r=>r.json()); setStats(s||{}); })(); },[]);
echo async function factoryReset(){
echo const phrase = prompt("Type RESET to confirm factory reset (this deletes vessels and crew).");
echo if(phrase!=="RESET") return;
echo setBusy(true);
echo try{
echo await fetch(`${BASE}/api/admin/factory_reset`, {method:"POST", headers:{"Content-Type":"application/json"}, body: JSON.stringify({confirm:"RESET"})});
echo alert("Factory reset complete.");
echo const s=await fetch(`${BASE}/api/admin/settings`).then(r=>r.json()); setStats(s||{});
echo } finally { setBusy(false); }
echo }
echo return (
echo <div>
echo <h2>Settings</h2>
echo {stats?.counts && (<p style={{fontSize:12,color:"#475569"}}>Vessels: {stats.counts.vessels} â€¢ Crew: {stats.counts.crew}</p>)}
echo <button onClick={factoryReset} disabled={busy} style={{background:"#b91c1c",color:"#fff",border:"0",padding:"6px 10px",borderRadius:6}}>Factory Reset</button>
echo </div>
echo );
echo }
)

REM Ensure App.tsx renders both cards
if exist "frontend\src\App.tsx" (
powershell -NoProfile -ExecutionPolicy Bypass ^
"$f='frontend/src/App.tsx'; $t=Get-Content -Raw $f; " ^
"$t = $t -replace '(?s)export default function App\\([\\s\\S]*$', 'import CrewManagement from \"./components/CrewManagement\";\nimport SettingsAdmin from \"./components/SettingsAdmin\";\nexport default function App(){\n return (\n <div>\n <div className=\"card\"><h1>ARUS Console</h1></div>\n <div className=\"card\"><CrewManagement/></div>\n <div className=\"card\"><SettingsAdmin/></div>\n </div>\n )\n}\n'; " ^
"Set-Content -Encoding UTF8 $f $t; " ^
"Write-Host '[OK] App.tsx updated to show Crew Management + Settings cards.'"
) else (
echo [WARN] frontend/src/App.tsx not found; created earlier if frontend was missing.
)

cd ..

echo.
echo ==========================================================
echo âœ… E2E patch applied.
echo ----------------------------------------------------------
echo Backend:
echo Start: cd backend-node ^& npm install ^& npm run dev (http://localhost:8001)
echo Endpoints:
echo GET /api/vessels | POST /api/vessels {id,name,imo?}
echo GET /api/crew[?vessel_id=] | POST /api/crew {id,name,rank?,vessel_id, on_duty?}
echo PATCH /api/crew/:id {name?,rank?,vessel_id?,on_duty?}
echo DELETE /api/crew/:id
echo GET /api/admin/settings
echo POST /api/admin/factory_reset {confirm:'RESET'}
echo GET /healthz, GET /metrics
echo
echo Frontend:
echo Start: cd frontend ^& npm install ^& npm run dev
echo Cards:
echo - Crew Management: select vessel -> reassign/remove/toggle duty inline
echo - Settings: Factory Reset only (all other options removed)
echo
echo Configure UI endpoint via: set VITE_API_URL=http://localhost:8001
echo ==========================================================
endlocal