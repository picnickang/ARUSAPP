import type { 
  MaintenanceSchedule, 
  InsertMaintenanceSchedule,
  MaintenanceTemplate,
  InsertMaintenanceTemplate
} from "@shared/schema";
import { maintenanceRepository } from "./repository";
import { recordAndPublish } from "../../sync-events";
import { mqttReliableSync } from "../../mqtt-reliable-sync";

/**
 * Maintenance Service
 * Handles business logic, orchestration, and event publishing for maintenance domain
 */
export class MaintenanceService {
  
  // ========== Maintenance Schedules ==========
  
  /**
   * List all maintenance schedules with optional filtering
   */
  async listSchedules(equipmentId?: string, status?: string): Promise<MaintenanceSchedule[]> {
    return maintenanceRepository.findAllSchedules(equipmentId, status);
  }
  
  /**
   * Get a single maintenance schedule by ID
   */
  async getScheduleById(id: string, orgId: string): Promise<MaintenanceSchedule | undefined> {
    return maintenanceRepository.findScheduleById(id, orgId);
  }
  
  /**
   * Create a new maintenance schedule
   */
  async createSchedule(
    data: InsertMaintenanceSchedule,
    userId?: string
  ): Promise<MaintenanceSchedule> {
    // Create schedule
    const schedule = await maintenanceRepository.createSchedule(data);
    
    // Publish events
    await recordAndPublish('maintenance_schedule', schedule.id, 'create', schedule, userId);
    
    mqttReliableSync.publishChange({
      entityType: 'maintenance_schedule',
      operation: 'create',
      entityId: schedule.id,
      payload: schedule,
    }).catch(err => {
      console.error('[Maintenance Service] Failed to publish schedule to MQTT:', err);
    });
    
    return schedule;
  }
  
  /**
   * Update an existing maintenance schedule
   */
  async updateSchedule(
    id: string,
    data: Partial<InsertMaintenanceSchedule>,
    userId?: string
  ): Promise<MaintenanceSchedule> {
    // Update schedule
    const schedule = await maintenanceRepository.updateSchedule(id, data);
    
    // Publish events
    await recordAndPublish('maintenance_schedule', schedule.id, 'update', schedule, userId);
    
    mqttReliableSync.publishChange({
      entityType: 'maintenance_schedule',
      operation: 'update',
      entityId: schedule.id,
      payload: schedule,
    }).catch(err => {
      console.error('[Maintenance Service] Failed to publish schedule update to MQTT:', err);
    });
    
    return schedule;
  }
  
  /**
   * Delete a maintenance schedule
   */
  async deleteSchedule(id: string, orgId: string, userId?: string): Promise<void> {
    // Get schedule data before deletion for event
    const schedule = await maintenanceRepository.findScheduleById(id, orgId);
    
    // Delete schedule
    await maintenanceRepository.deleteSchedule(id);
    
    // Publish delete event
    if (schedule) {
      await recordAndPublish('maintenance_schedule', id, 'delete', schedule, userId);
      
      mqttReliableSync.publishChange({
        entityType: 'maintenance_schedule',
        operation: 'delete',
        entityId: id,
        payload: schedule,
      }).catch(err => {
        console.error('[Maintenance Service] Failed to publish schedule deletion to MQTT:', err);
      });
    }
  }
  
  /**
   * Get upcoming maintenance schedules
   */
  async getUpcomingSchedules(orgId: string, daysAhead: number = 30): Promise<MaintenanceSchedule[]> {
    return maintenanceRepository.findUpcomingSchedules(orgId, daysAhead);
  }
  
  /**
   * Auto-schedule maintenance for equipment based on PdM score
   */
  async autoScheduleForEquipment(
    equipmentId: string, 
    pdmScore: number,
    userId?: string
  ): Promise<MaintenanceSchedule> {
    // Auto-schedule maintenance
    const schedule = await maintenanceRepository.autoScheduleForEquipment(equipmentId, pdmScore);
    
    // Publish events
    await recordAndPublish('maintenance_schedule', schedule.id, 'create', {
      ...schedule,
      autoGenerated: true,
      pdmScore,
    }, userId);
    
    mqttReliableSync.publishChange({
      entityType: 'maintenance_schedule',
      operation: 'create',
      entityId: schedule.id,
      payload: {
        ...schedule,
        autoGenerated: true,
        pdmScore,
      },
    }).catch(err => {
      console.error('[Maintenance Service] Failed to publish auto-scheduled maintenance to MQTT:', err);
    });
    
    return schedule;
  }
  
  // ========== Maintenance Templates ==========
  
  /**
   * List all maintenance templates with optional filtering
   */
  async listTemplates(
    orgId?: string, 
    equipmentType?: string, 
    isActive?: boolean
  ): Promise<MaintenanceTemplate[]> {
    return maintenanceRepository.findAllTemplates(orgId, equipmentType, isActive);
  }
  
  /**
   * Get a single maintenance template by ID
   */
  async getTemplateById(id: string, orgId: string): Promise<MaintenanceTemplate | undefined> {
    return maintenanceRepository.findTemplateById(id, orgId);
  }
  
  /**
   * Create a new maintenance template
   */
  async createTemplate(
    data: InsertMaintenanceTemplate,
    userId?: string
  ): Promise<MaintenanceTemplate> {
    // Create template
    const template = await maintenanceRepository.createTemplate(data);
    
    // Publish events
    await recordAndPublish('maintenance_template', template.id, 'create', template, userId);
    
    mqttReliableSync.publishChange({
      entityType: 'maintenance_template',
      operation: 'create',
      entityId: template.id,
      payload: template,
    }).catch(err => {
      console.error('[Maintenance Service] Failed to publish template to MQTT:', err);
    });
    
    return template;
  }
  
  /**
   * Update an existing maintenance template
   */
  async updateTemplate(
    id: string,
    data: Partial<InsertMaintenanceTemplate>,
    orgId: string,
    userId?: string
  ): Promise<MaintenanceTemplate> {
    // Update template
    const template = await maintenanceRepository.updateTemplate(id, data, orgId);
    
    // Publish events
    await recordAndPublish('maintenance_template', template.id, 'update', template, userId);
    
    mqttReliableSync.publishChange({
      entityType: 'maintenance_template',
      operation: 'update',
      entityId: template.id,
      payload: template,
    }).catch(err => {
      console.error('[Maintenance Service] Failed to publish template update to MQTT:', err);
    });
    
    return template;
  }
  
  /**
   * Delete a maintenance template
   */
  async deleteTemplate(id: string, orgId: string, userId?: string): Promise<void> {
    // Get template data before deletion for event
    const template = await maintenanceRepository.findTemplateById(id, orgId);
    
    // Delete template
    await maintenanceRepository.deleteTemplate(id, orgId);
    
    // Publish delete event
    if (template) {
      await recordAndPublish('maintenance_template', id, 'delete', template, userId);
      
      mqttReliableSync.publishChange({
        entityType: 'maintenance_template',
        operation: 'delete',
        entityId: id,
        payload: template,
      }).catch(err => {
        console.error('[Maintenance Service] Failed to publish template deletion to MQTT:', err);
      });
    }
  }
}

// Export singleton instance
export const maintenanceService = new MaintenanceService();
